################################################################
# Date Functions
################################################################

isPayOutDate[Date date, Date payoutdate, Freq freq] : Boolean =
	case freq {
		Daily => True;
		Monthly => date.days == payoutdate.days;
		Quarterly => date.days == payoutdate.days && (payoutdate.month - date.month) % 3 == 0;
		Yearly => date.days == payoutdate.days && date.month == payoutdate.month;
	};

##################################################################
# Interest rate Functions
##################################################################

interest[Integer maximum, map[Integer : Percentage] interestRates, map[Date : Integer] balance, Date start, Date end] : Integer =
	sum(min[balance[date],maximum]*interestRates.get[balance[date]]/daysInYear[date] | date <- {start ... end});

interest[Integer maximum, map[Integer : Percentage] interestRates, Percentage bonusrate, map[Date : Integer] balance, Date start, Date end] : Integer =
	balance[start] <= balance[end] ? sum((min[balance[date],maximum]*(interestRates.get[balance[date]]+bonusrate))/daysInYear[date] | date <- {start ... end}); : interest[maximum,interestRates,balance,start,end];

##################################################################
# Penalty Functions for Withdrawal and Deposits
##################################################################

noPenalty[Integer yearsLeft] : Percentage = 0%;
Penalty[Integer yearsLeft] : Percentage = min[7% , 1%*yearsLeft];